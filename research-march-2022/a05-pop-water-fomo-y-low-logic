/* Rocksetta Shredder Car code
 * 
 *  FOR the GRAYSCALE Waveshare OLED 128 x 128 using library Adafruit_SSD1327.h
 *   blue  DIN (mosi) D8
 *   yellow (sck) D9                                                                                                                                                             
 *   orange (cs) D7
 *   green (dc)  D6
 *   white (reset) not needed but D14 if you did
 *   
 *   
 *   
    myServo_D2.attach(D2);   // D2 should do PWM on Portenta


 *   For motors servo and DC
 *  pinMode(D3, OUTPUT);   // digital 0 to 1
    pinMode(D5, OUTPUT);   // PWM 0 to 255
    pinMode(D6, OUTPUT);   // digital 0 to 1      // this is a conflict above need to try D10 to D14 
 *
 * another reference here 
 * https://learn.adafruit.com/adafruit-gfx-graphics-library/graphics-primitives
 *
 * Note1: Should work with any Edge Impulse model just change the below include to your model name
 */



/* Includes ---------------------------------------------------------------- */

// Get this from Deployment at EdgeImpulse
#include <ei-v5-0-0-96x96-fomo-vision-1pop-2water-3cone_inferencing.h>


#include <map>

// This has most of the edgeImpulse output code
#include "edge-impulse-advanced-v2.h"
#include <Adafruit_SSD1327.h>
#include <Servo.h>
#include "mbed.h"
#include "rtos.h"
//using namespace mbed;  // sometimes needed
using namespace rtos;




// Used for software SPI
#define OLED_CLK D9
#define OLED_MOSI D8

// Used for software or hardware SPI
#define OLED_CS D7
#define OLED_DC D6

// Used for I2C or SPI
#define OLED_RESET -1

// hardware SPI
Adafruit_SSD1327 display(128, 128, &SPI, OLED_DC, OLED_RESET, OLED_CS);

// Global Variables
int myDelay = 0;  // delay between readings, can be zero, default 2000 = 2 seconds
int x1Map, x2Map, y1Map, y2Map;
//int myClassCount[EI_CLASSIFIER_LABEL_COUNT]; // not yet used

Thread myThread01;

int myGlobalD5 = 0;

Servo myServo_D2;

bool myLoRaStop = false;

    int myObectCode = 0;   // 0=unknown,   1= pop,  2= water,  3=cone   ,  4  both pop and cone or pop and water 
    int myMaxPopY = -1;       
    int myMaxWaterY = -1;     
    int myObjectCount = 0;     
    int myObjectCountOld = 0;     



// servo controlling thread
void myLedBlue_myThread01(){
   while (true) {
      analogWrite(D5, myGlobalD5);  
	@@ -92,66 +65,40 @@ void myLedBlue_myThread01(){



// the OLED uses these
#define CUTOUT_COLS                 EI_CLASSIFIER_INPUT_WIDTH
#define CUTOUT_ROWS                 EI_CLASSIFIER_INPUT_HEIGHT
const int cutout_row_start = (EI_CAMERA_RAW_FRAME_BUFFER_ROWS - CUTOUT_ROWS) / 2;
const int cutout_col_start = (EI_CAMERA_RAW_FRAME_BUFFER_COLS - CUTOUT_COLS) / 2;


int myTotalObjects = 0;
std::map<std::string, int> cnt;




/**
* @brief      Arduino setup function
*/
void setup()
{
   // activate the servo thread
    myThread01.start(myLedBlue_myThread01);

    // put your setup code here, to run once:
    Serial.begin(115200);
  //  Serial.println("Edge Impulse Inferencing Demo");

    pinMode(LEDR, OUTPUT); 
    pinMode(LEDG, OUTPUT);   // this is LED_BUILTIN
    pinMode(LEDB, OUTPUT); 

    SerialLoRa.begin(9600); // for LoRa must be 9600

    Serial.println("Edge Impulse Inferencing Demo");
    myServo_D2.attach(D2);   // D2 should do PWM on Portenta

    pinMode(LEDR, OUTPUT); 
    pinMode(LEDG, OUTPUT);   // this is LED_BUILTIN
    pinMode(LEDB, OUTPUT); 
    pinMode(D3, OUTPUT);   // digital 0 to 1 
    pinMode(D5, OUTPUT);   // PWM 0 to 255
  //  pinMode(D6, OUTPUT);   // digital 0 to 1   //  conflict  direction and OLED
   // pinMode(D10, OUTPUT);   // digital 0 to 1   //  conflict  pinMode(D6, OUTPUT);   // digital 0 to 1
   // pinMode(D1, OUTPUT);   // digital 0 to 1   
   // pinMode(D0, OUTPUT);   // digital 0 to 1   


  //  digitalWrite(D10, 0);    // set one direction   // best just to not use this one as it seems to overload the portenta.
    digitalWrite(D3, 1);    // set one direction 



#ifdef EI_CAMERA_FRAME_BUFFER_SDRAM
    // initialise the SDRAM
    SDRAM.begin(SDRAM_START_ADDRESS);
#endif

    if (ei_camera_init()) {
        Serial.println("Failed to initialize Camera!");
    }
    else {
        Serial.println("Camera initialized");
    }

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
	@@ -165,63 +112,22 @@ void setup()
            }
        }
    }

    // Following for the Grayscale OLED

   if ( ! display.begin(0x3D) ) {   // start Grayscale OLED
     Serial.println("Unable to initialize OLED");
     while (1) yield();
  }    
    display.setTextSize(1);
    display.setTextColor(SSD1327_WHITE);

    display.setRotation(0);
    display.setCursor(0,0);

    //   map cutout of the 320 x 320   // 240 model to OLED 128 x 64 screen
    x1Map = map((int)cutout_col_start, 0, 320, 0, 127);  
    x2Map = map((int)CUTOUT_COLS, 0, 320, 0, 127);
    y1Map = map((int)cutout_row_start, 0, 320, 0, 127);
    y2Map = map((int)CUTOUT_ROWS, 0, 320, 0, 127);


}

/**
* @brief      Get data and run inferencing
*
* @param[in]  debug  Get debug info if true
*/
void loop(){

    // instead of wait_ms, we'll wait on the signal, this allows threads to cancel us...
    if (ei_sleep(myDelay) != EI_IMPULSE_OK) {
        return;
    }

    //Serial.println("Starting inferencing in "+String(myDelay)+" microseconds...");

    // Put the image on the OLED
    display.clearDisplay();                 // clear the internal memory for OLED
    for (int x=0; x < EI_CAMERA_RAW_FRAME_BUFFER_COLS; x++){     // EI_CAMERA_RAW_FRAME_BUFFER_COLS = 320
      for (int y=0; y < EI_CAMERA_RAW_FRAME_BUFFER_ROWS; y++){       //EI_CAMERA_RAW_FRAME_BUFFER_ROWS = 320   //240

        uint8_t myGRAY = ei_camera_frame_buffer[(y * (int)EI_CAMERA_RAW_FRAME_BUFFER_COLS) + x];  

          int myGrayMap = map(myGRAY, 0, 255, 0, 15);  
          int xMap = map(x, 0, 320, 0, 127);
          int yMap = map(y, 0, 320, 0, 127);
          display.drawPixel(xMap, yMap, myGrayMap );   // grayscale 0-255, 128x128  //128 x 64
      } 
    }

    display.drawRect(2, 2,   126, 126, SSD1327_WHITE );  // rectangle around outside of OLED

    display.setCursor(20,5);
    display.println("Rocksetta: ");



    ei::signal_t signal;
    signal.total_length = EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT;
    signal.get_data = &ei_camera_cutout_get_data;
	@@ -231,218 +137,131 @@ void loop(){
        return;
    }

    myObectCode = 0;   // 0=unknown,   1= pop,  2= water,  3=cone   ,  4  both pop and cone or pop and water 
    myMaxPopY = -1;       
    myMaxWaterY = -1;     
    myObjectCount = 0;     
    myObjectCountOld = 0;     

    // ei_printf("--------------\n");  //%u\n",EI_CLASSIFIER_OBJECT_DETECTION_COUNT);   

    // Run the classifier
    ei_impulse_result_t result = { 0 };

    EI_IMPULSE_ERROR err = run_classifier(&signal, &result, debug_nn);
    if (err != EI_IMPULSE_OK) {
      //  Serial.println("ERR: Failed to run classifier, error number: " + String(err));
        return;
    }





    bool bb_found = result.bounding_boxes[0].value > 0;
    for (size_t ix = 0; ix < EI_CLASSIFIER_OBJECT_DETECTION_COUNT; ix++) {

        myObjectCount++;   // kind of the same as ix

        auto bb = result.bounding_boxes[ix];
        if (bb.value == 0) {
            continue;
        }

        std::string label(bb.label);
        auto cnt_entry = cnt.find(label);
        if (cnt_entry == cnt.end()) {
            cnt[label] = 1;
        }
        else {
            cnt_entry->second++;
        }



        //display.println(String(bb.label).substring(0, 4) );  // only print the start of the label

        int xMap = map(bb.x, 0,96, 0,127);
        int yMap = map(bb.y, 0,96, 0,127);
        int widthMap = map(bb.width, 0,96, 0,127);
        int heightMap = map(bb.height, 0,96, 0,127);

        display.drawRect(xMap, yMap, widthMap, heightMap, SSD1327_WHITE ); 
        myTotalObjects += EI_CLASSIFIER_OBJECT_DETECTION_COUNT;
        display.setCursor(xMap, yMap-5); 
        display.println("x:" + String(xMap)+",y:" + String(yMap));  // label    



       // sepecific to RC car Library and label  1popgoright 2watergoleft  might have to change these
       if (label == "1popgoright"){
       // ei_printf("Pop label");
          if (yMap > myMaxPopY){ myMaxPopY = yMap;}  
       }

       if (label == "2watergoleft"){
       // ei_printf("Water label");
          if (yMap > myMaxWaterY){ myMaxWaterY = yMap;}  
       }       



        display.setCursor(bb.x-3, bb.y-2);
        String myShortLabel = String(bb.label).substring(0, 4);
        display.println(String(myShortLabel) );  // only print the start of the label

        ei_printf("    %s (", bb.label);
       // ei_printf("    %s (", myShortLabel);
        ei_printf_float(bb.value);
        ei_printf(") [ x: %u, y: %u, width: %u, height: %u ,  objectCount %u, popY %d, waterY %d\n", bb.x, bb.y, bb.width, bb.height,  myObjectCount, myMaxPopY, myMaxWaterY );




    }

    if (!bb_found) {
       // ei_printf("    No objects found\n");
         myObectCode=0;  // no objects then car stops!
    }

    // print the counts per label
    int myLoop = 2;
    for (auto it : cnt) {
       // printf("%s: %d\n", it.first.c_str(), it.second);
       //display.setCursor(80,5); // near the top
       //display.println(String(myTotalObjects));
        myLoop++;
        display.setCursor(25,(myLoop*10)); 
        display.println(it.first.c_str());  // label    
        display.setCursor(5,(myLoop*10)); 
        display.println(String(it.second)); // count for that label     
    }


#if EI_CLASSIFIER_HAS_ANOMALY == 1
   // Serial.println("    anomaly score: " + String(result.anomaly, 5));
#endif
   
    digitalWrite(LEDB, HIGH);   //on board LED's are turned off by HIGH    
    digitalWrite(LEDG, HIGH);   
    digitalWrite(LEDR, HIGH); 

   if (bb_found) {    // if objects are found lets load some lights
     if (EI_CLASSIFIER_OBJECT_DETECTION_COUNT % 3 == 0) { digitalWrite(LEDR, LOW); } // red on
     if (EI_CLASSIFIER_OBJECT_DETECTION_COUNT % 3 == 1) { digitalWrite(LEDG, LOW); } // green on
     if (EI_CLASSIFIER_OBJECT_DETECTION_COUNT % 3 == 2) { digitalWrite(LEDB, LOW); } // blue on
   }


 if (!myLoRaStop){   // 0 to 30 straight

// more fuzzy logic here
   if (myMaxPopY < 0 && myMaxWaterY < 0){myObjectCount = 0;}   // nothing
   if (myMaxPopY > 0 && myMaxWaterY < 0){myObjectCount = 1;}   // Pop
   if (myMaxPopY < 0 && myMaxWaterY > 0){myObjectCount = 2;}   // Water
   if (myMaxPopY > 0 && myMaxWaterY > 0){myObjectCount = 3;}   // Pop and Water  ignore cone



   // stability test. If not same as last measurement toss it.
   if (myObjectCount == myObjectCountOld) { 
       // myObjectCount =  myObjectCountOld  // do nothing
   } else {
       myObjectCount = myObjectCountOld;
   }

   // solved higher up
    //let myObectCode = -1   // 0=unknown,   1= pop,  2= water,  3=cone   ,  >4  both pop and cone or pop and water 
   // let myObectX = -1     // x location


    // I find it less confusing if the 0unknown does nothing






    if (myObectCode == 0){    // 0 unknown do nothing
        digitalWrite(LEDR, LOW);    
        digitalWrite(LEDG, LOW);  
        //analogWrite(D5, 0);     // stop
        myGlobalD5 = 0; 
      ei_printf("0: Unknown Stop: %u\n", myObectCode);
      display.setCursor(3,110);
      display.println("0: Unknown Stop: " + String(myObectCode) ); 
    }


    if (myObectCode == 1){   // 1pop: Go Right
      digitalWrite(LEDB, LOW);              // Blue LED on
      //analogWrite(D5, 30);     // slow 
      myGlobalD5 = 30;
      myServo_D2.write(110);   // go right
      ei_printf("1: Pop Go right: %u\n", myObectCode);
      display.setCursor(3,110);
      display.println("1: Pop Go right: " + String(myObectCode) ); 
    }

    if (myObectCode == 3 ||  myObectCode == 2){   // 2water : go left or a cone then go left
      digitalWrite(LEDG, LOW);              // Green LED on     
      //analogWrite(D5, 30);     // slow 
      myGlobalD5 = 30;  
      myServo_D2.write(70);    // go left
      ei_printf("2: Water Go Left: %u\n", myObectCode);
      display.setCursor(3,110);
      display.println("2: Water Go Left: " + String(myObectCode) ); 
    }

    if (myObectCode >= 4 ){   // 3fast go straight // lots of cups go straight seeing lots of things
      digitalWrite(LEDR, LOW);              // Red LED on  
     // analogWrite(D5, 30);     // medium   
      myGlobalD5 = 60;
      myServo_D2.write(90);    // straight   
      ei_printf("3: Both Go Fast: %u\n", myObectCode);        
      display.setCursor(3,110);
      display.println("3: Both Go Fast: " + String(myObectCode) ); 
    }

    // put more if statements here for your model
  }  // end if myLoRaStop

  while (SerialLoRa.available()) {      // If anything comes in Serial (USB),
   // Serial.print( (char)SerialLoRa.read());   // read it and send it out Serial1 (pins 0 & 1) 
    myLoRaStop = true;
    myGlobalD5 = 0; // shutdown motor speed PWM   
    ei_printf("STOP!");
    digitalWrite(LEDB, LOW);   //on board LED's are turned on by LOW   
    digitalWrite(LEDG, LOW);   
    digitalWrite(LEDR, LOW);   // all on is white
    delay(300); // give it time to happen
    myThread01.terminate();
    delay(5000);
  }






        display.setCursor(80,5); // near the top
        display.println(String(myTotalObjects));

     // Last thing is to show the 128x128 GRAYSCALE OLED
     display.display();  // OLED 4 bit 16 color GRAYSCALE update

}
